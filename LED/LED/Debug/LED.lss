
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001f6  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d3  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000019c  00000000  00000000  00000427  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000005c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000154  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000010  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	40 c0       	rjmp	.+128    	; 0xb6 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:


#include <avr/io.h>
#include <util/delay.h>
int main(void)
{	DDRB=0b00001111;
  38:	8f e0       	ldi	r24, 0x0F	; 15
  3a:	87 bb       	out	0x17, r24	; 23
	DDRD=0b00000100;
  3c:	84 e0       	ldi	r24, 0x04	; 4
  3e:	81 bb       	out	0x11, r24	; 17
    while(1)
    {
		PORTB=0b00001000;
  40:	38 e0       	ldi	r19, 0x08	; 8
		_delay_ms(5000);
		PORTB=0b00000100;
		PORTD=0b00000000;
		
		_delay_ms(5000);
		PORTB=0b00000010;
  42:	22 e0       	ldi	r18, 0x02	; 2
		PORTD=0b00000100;
		
		_delay_ms(5000);
		PORTB=0b00000001;
  44:	91 e0       	ldi	r25, 0x01	; 1
int main(void)
{	DDRB=0b00001111;
	DDRD=0b00000100;
    while(1)
    {
		PORTB=0b00001000;
  46:	38 bb       	out	0x18, r19	; 24
		PORTD=0b00000100;
  48:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4a:	4f e3       	ldi	r20, 0x3F	; 63
  4c:	52 e4       	ldi	r21, 0x42	; 66
  4e:	6f e0       	ldi	r22, 0x0F	; 15
  50:	41 50       	subi	r20, 0x01	; 1
  52:	50 40       	sbci	r21, 0x00	; 0
  54:	60 40       	sbci	r22, 0x00	; 0
  56:	e1 f7       	brne	.-8      	; 0x50 <__SREG__+0x11>
  58:	00 c0       	rjmp	.+0      	; 0x5a <__SREG__+0x1b>
  5a:	00 00       	nop
		
		_delay_ms(5000);
		PORTB=0b00000100;
  5c:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00000000;
  5e:	12 ba       	out	0x12, r1	; 18
  60:	4f e3       	ldi	r20, 0x3F	; 63
  62:	52 e4       	ldi	r21, 0x42	; 66
  64:	6f e0       	ldi	r22, 0x0F	; 15
  66:	41 50       	subi	r20, 0x01	; 1
  68:	50 40       	sbci	r21, 0x00	; 0
  6a:	60 40       	sbci	r22, 0x00	; 0
  6c:	e1 f7       	brne	.-8      	; 0x66 <__SREG__+0x27>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <__SREG__+0x31>
  70:	00 00       	nop
		
		_delay_ms(5000);
		PORTB=0b00000010;
  72:	28 bb       	out	0x18, r18	; 24
		PORTD=0b00000100;
  74:	82 bb       	out	0x12, r24	; 18
  76:	4f e3       	ldi	r20, 0x3F	; 63
  78:	52 e4       	ldi	r21, 0x42	; 66
  7a:	6f e0       	ldi	r22, 0x0F	; 15
  7c:	41 50       	subi	r20, 0x01	; 1
  7e:	50 40       	sbci	r21, 0x00	; 0
  80:	60 40       	sbci	r22, 0x00	; 0
  82:	e1 f7       	brne	.-8      	; 0x7c <__SREG__+0x3d>
  84:	00 c0       	rjmp	.+0      	; 0x86 <__SREG__+0x47>
  86:	00 00       	nop
		
		_delay_ms(5000);
		PORTB=0b00000001;
  88:	98 bb       	out	0x18, r25	; 24
		PORTD=0b00000000;
  8a:	12 ba       	out	0x12, r1	; 18
  8c:	4f e3       	ldi	r20, 0x3F	; 63
  8e:	52 e4       	ldi	r21, 0x42	; 66
  90:	6f e0       	ldi	r22, 0x0F	; 15
  92:	41 50       	subi	r20, 0x01	; 1
  94:	50 40       	sbci	r21, 0x00	; 0
  96:	60 40       	sbci	r22, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <__SREG__+0x53>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <__SREG__+0x5d>
  9c:	00 00       	nop
		_delay_ms(5000);
		PORTB=0b00000000;
  9e:	18 ba       	out	0x18, r1	; 24
		PORTD=0b00000100;
  a0:	82 bb       	out	0x12, r24	; 18
  a2:	4f e3       	ldi	r20, 0x3F	; 63
  a4:	52 e4       	ldi	r21, 0x42	; 66
  a6:	6f e0       	ldi	r22, 0x0F	; 15
  a8:	41 50       	subi	r20, 0x01	; 1
  aa:	50 40       	sbci	r21, 0x00	; 0
  ac:	60 40       	sbci	r22, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__SREG__+0x69>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <__SREG__+0x73>
  b2:	00 00       	nop
  b4:	c8 cf       	rjmp	.-112    	; 0x46 <__SREG__+0x7>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
